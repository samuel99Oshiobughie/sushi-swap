{"ast":null,"code":"import { ethers } from 'ethers';\nexport const getSignerFromOptions = (provider, options, library) => {\n  const privateKey = options && 'privateKey' in options && options.privateKey;\n  const mnemonicPhrase = options && 'mnemonicPhrase' in options && options.mnemonicPhrase;\n  const json = options && 'json' in options && options.json;\n  const password = options && 'password' in options && options.password;\n  const privateKeySigner = privateKey && provider && new ethers.Wallet(privateKey, provider);\n  const mnemonicPhraseSigner = mnemonicPhrase && provider && ethers.Wallet.fromMnemonic(mnemonicPhrase).connect(provider);\n  const encryptedJsonSigner = json && password && provider && ethers.Wallet.fromEncryptedJsonSync(json, password).connect(provider);\n  const optionsSigner = options && 'signer' in options && options.signer;\n  return privateKeySigner || mnemonicPhraseSigner || encryptedJsonSigner || optionsSigner || (library === null || library === void 0 ? void 0 : library.getSigner());\n};","map":{"version":3,"sources":["../../../../src/helpers/getSignerFromOptions.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAkC,QAAlC;AAMA,OAAO,MAAM,oBAAoB,GAAG,CAClC,QADkC,EAElC,OAFkC,EAGlC,OAHkC,KAIhC;EACF,MAAM,UAAU,GAAG,OAAO,IAAI,gBAAgB,OAA3B,IAAsC,OAAO,CAAC,UAAjE;EACA,MAAM,cAAc,GAAG,OAAO,IAAI,oBAAoB,OAA/B,IAA0C,OAAO,CAAC,cAAzE;EACA,MAAM,IAAI,GAAG,OAAO,IAAI,UAAU,OAArB,IAAgC,OAAO,CAAC,IAArD;EACA,MAAM,QAAQ,GAAG,OAAO,IAAI,cAAc,OAAzB,IAAoC,OAAO,CAAC,QAA7D;EAEA,MAAM,gBAAgB,GAAG,UAAU,IAAI,QAAd,IAA0B,IAAI,MAAM,CAAC,MAAX,CAAkB,UAAlB,EAA8B,QAA9B,CAAnD;EACA,MAAM,oBAAoB,GACxB,cAAc,IAAI,QAAlB,IAA8B,MAAM,CAAC,MAAP,CAAc,YAAd,CAA2B,cAA3B,EAA2C,OAA3C,CAAmD,QAAnD,CADhC;EAEA,MAAM,mBAAmB,GACvB,IAAI,IAAI,QAAR,IAAoB,QAApB,IAAgC,MAAM,CAAC,MAAP,CAAc,qBAAd,CAAoC,IAApC,EAA0C,QAA1C,EAAoD,OAApD,CAA4D,QAA5D,CADlC;EAGA,MAAM,aAAa,GAAG,OAAO,IAAI,YAAY,OAAvB,IAAkC,OAAO,CAAC,MAAhE;EAEA,OAAO,gBAAgB,IAAI,oBAApB,IAA4C,mBAA5C,IAAmE,aAAnE,KAAoF,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,SAAT,EAApF,CAAP;AACD,CAnBM","sourceRoot":"","sourcesContent":["import { ethers } from 'ethers';\nexport const getSignerFromOptions = (provider, options, library) => {\n    const privateKey = options && 'privateKey' in options && options.privateKey;\n    const mnemonicPhrase = options && 'mnemonicPhrase' in options && options.mnemonicPhrase;\n    const json = options && 'json' in options && options.json;\n    const password = options && 'password' in options && options.password;\n    const privateKeySigner = privateKey && provider && new ethers.Wallet(privateKey, provider);\n    const mnemonicPhraseSigner = mnemonicPhrase && provider && ethers.Wallet.fromMnemonic(mnemonicPhrase).connect(provider);\n    const encryptedJsonSigner = json && password && provider && ethers.Wallet.fromEncryptedJsonSync(json, password).connect(provider);\n    const optionsSigner = options && 'signer' in options && options.signer;\n    return privateKeySigner || mnemonicPhraseSigner || encryptedJsonSigner || optionsSigner || (library === null || library === void 0 ? void 0 : library.getSigner());\n};\n//# sourceMappingURL=getSignerFromOptions.js.map"]},"metadata":{},"sourceType":"module"}