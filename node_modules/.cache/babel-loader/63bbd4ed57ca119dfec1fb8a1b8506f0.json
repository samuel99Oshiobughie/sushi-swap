{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer, useState } from 'react';\nimport { NetworkContext } from './context';\nimport { defaultNetworkState, networkReducer } from './reducer';\nimport { providers } from 'ethers';\nimport { subscribeToProviderEvents, getInjectedProvider, isWebSocketProvider } from '../../../helpers';\nimport { useLocalStorage, useConfig } from '../../../hooks';\nimport detectEthereumProvider from '@metamask/detect-provider';\nconst Provider = providers.Provider;\nconst Web3Provider = providers.Web3Provider;\n\nasync function tryToGetAccount(provider) {\n  try {\n    return await provider.getSigner().getAddress();\n  } catch (err) {\n    if (err.code === 'UNSUPPORTED_OPERATION') {\n      // readonly provider\n      return undefined;\n    }\n\n    throw err;\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\n\nexport function NetworkProvider(_ref) {\n  let {\n    children,\n    providerOverride\n  } = _ref;\n  const {\n    autoConnect,\n    pollingInterval,\n    noMetamaskDeactivate,\n    pollingIntervals\n  } = useConfig();\n  const [network, dispatch] = useReducer(networkReducer, defaultNetworkState);\n  const [onUnsubscribe, setOnUnsubscribe] = useState(() => () => undefined);\n  const [shouldConnectMetamask, setShouldConnectMetamask] = useLocalStorage('shouldConnectMetamask');\n  const [isLoading, setLoading] = useState(false);\n  const getPollingInterval = useCallback(chainId => {\n    var _a;\n\n    return (_a = pollingIntervals === null || pollingIntervals === void 0 ? void 0 : pollingIntervals[chainId]) !== null && _a !== void 0 ? _a : pollingInterval;\n  }, [pollingInterval, pollingIntervals]);\n  const activateBrowserWallet = useCallback(async () => {\n    setLoading(true);\n    const injectedProvider = await getInjectedProvider(getPollingInterval);\n\n    if (!injectedProvider) {\n      reportError(new Error('No injected provider available'));\n      setLoading(false);\n      console.error('No injected provider available'); // we do not want to crash the app when there is no metamask\n\n      return;\n    }\n\n    try {\n      await injectedProvider.send('eth_requestAccounts', []);\n      setShouldConnectMetamask(true);\n    } catch (err) {\n      reportError(err);\n      setShouldConnectMetamask(false);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n\n    return activate(injectedProvider);\n  }, []);\n  useEffect(() => {\n    if (providerOverride) {\n      void activate(providerOverride);\n    }\n  }, [providerOverride]);\n  const update = useCallback(newNetwork => {\n    dispatch({\n      type: 'UPDATE_NETWORK',\n      network: newNetwork\n    });\n  }, [network]);\n  const reportError = useCallback(error => {\n    console.error(error);\n    dispatch({\n      type: 'ADD_ERROR',\n      error\n    });\n  }, []);\n  const deactivate = useCallback(() => {\n    setShouldConnectMetamask(false);\n    update({\n      accounts: []\n    });\n  }, []);\n  const onDisconnect = useCallback(provider => error => {\n    const isMetaMask = provider.provider.isMetaMask;\n\n    if (!noMetamaskDeactivate || !isMetaMask) {\n      reportError(error);\n      deactivate();\n    }\n  }, []);\n  useEffect(() => {\n    setTimeout(async () => {\n      var _a, _b, _c;\n\n      try {\n        if (shouldConnectMetamask && autoConnect && !providerOverride) {\n          await detectEthereumProvider(); // If window.ethereum._state.accounts is non null but has no items,\n          // it probably means that the user has disconnected Metamask manually.\n\n          if (shouldConnectMetamask && ((_c = (_b = (_a = window.ethereum) === null || _a === void 0 ? void 0 : _a._state) === null || _b === void 0 ? void 0 : _b.accounts) === null || _c === void 0 ? void 0 : _c.length) === 0) {\n            return;\n          }\n\n          await activateBrowserWallet();\n        }\n      } catch (err) {\n        console.warn(err);\n      }\n    });\n  }, [shouldConnectMetamask, autoConnect, providerOverride]);\n  const activate = useCallback(async provider => {\n    var _a;\n\n    const wrappedProvider = Provider.isProvider(provider) ? provider : new Web3Provider(provider);\n\n    try {\n      setLoading(true);\n      const account = await tryToGetAccount(wrappedProvider);\n      const chainId = (_a = await wrappedProvider.getNetwork()) === null || _a === void 0 ? void 0 : _a.chainId;\n      onUnsubscribe();\n      const clearSubscriptions = subscribeToProviderEvents(wrappedProvider.provider, update, onDisconnect(wrappedProvider), chainId => {\n        if (!isWebSocketProvider(wrappedProvider)) {\n          wrappedProvider.pollingInterval = getPollingInterval(chainId);\n        }\n      });\n      setOnUnsubscribe(() => clearSubscriptions);\n      update({\n        provider: wrappedProvider,\n        chainId,\n        accounts: account ? [account] : []\n      });\n    } catch (err) {\n      reportError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [onUnsubscribe]);\n  return _jsx(NetworkContext.Provider, {\n    value: {\n      network,\n      update,\n      activate,\n      deactivate,\n      reportError,\n      activateBrowserWallet,\n      isLoading\n    },\n    children: children\n  });\n}","map":{"version":3,"sources":["../../../../../../src/providers/network/network/provider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer, useState } from 'react';\nimport { NetworkContext } from './context';\nimport { defaultNetworkState, networkReducer } from './reducer';\nimport { providers } from 'ethers';\nimport { subscribeToProviderEvents, getInjectedProvider, isWebSocketProvider } from '../../../helpers';\nimport { useLocalStorage, useConfig } from '../../../hooks';\nimport detectEthereumProvider from '@metamask/detect-provider';\nconst Provider = providers.Provider;\nconst Web3Provider = providers.Web3Provider;\nasync function tryToGetAccount(provider) {\n    try {\n        return await provider.getSigner().getAddress();\n    }\n    catch (err) {\n        if (err.code === 'UNSUPPORTED_OPERATION') {\n            // readonly provider\n            return undefined;\n        }\n        throw err;\n    }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function NetworkProvider({ children, providerOverride }) {\n    const { autoConnect, pollingInterval, noMetamaskDeactivate, pollingIntervals } = useConfig();\n    const [network, dispatch] = useReducer(networkReducer, defaultNetworkState);\n    const [onUnsubscribe, setOnUnsubscribe] = useState(() => () => undefined);\n    const [shouldConnectMetamask, setShouldConnectMetamask] = useLocalStorage('shouldConnectMetamask');\n    const [isLoading, setLoading] = useState(false);\n    const getPollingInterval = useCallback((chainId) => { var _a; return (_a = pollingIntervals === null || pollingIntervals === void 0 ? void 0 : pollingIntervals[chainId]) !== null && _a !== void 0 ? _a : pollingInterval; }, [\n        pollingInterval,\n        pollingIntervals,\n    ]);\n    const activateBrowserWallet = useCallback(async () => {\n        setLoading(true);\n        const injectedProvider = await getInjectedProvider(getPollingInterval);\n        if (!injectedProvider) {\n            reportError(new Error('No injected provider available'));\n            setLoading(false);\n            console.error('No injected provider available'); // we do not want to crash the app when there is no metamask\n            return;\n        }\n        try {\n            await injectedProvider.send('eth_requestAccounts', []);\n            setShouldConnectMetamask(true);\n        }\n        catch (err) {\n            reportError(err);\n            setShouldConnectMetamask(false);\n            throw err;\n        }\n        finally {\n            setLoading(false);\n        }\n        return activate(injectedProvider);\n    }, []);\n    useEffect(() => {\n        if (providerOverride) {\n            void activate(providerOverride);\n        }\n    }, [providerOverride]);\n    const update = useCallback((newNetwork) => {\n        dispatch({ type: 'UPDATE_NETWORK', network: newNetwork });\n    }, [network]);\n    const reportError = useCallback((error) => {\n        console.error(error);\n        dispatch({ type: 'ADD_ERROR', error });\n    }, []);\n    const deactivate = useCallback(() => {\n        setShouldConnectMetamask(false);\n        update({\n            accounts: [],\n        });\n    }, []);\n    const onDisconnect = useCallback((provider) => (error) => {\n        const isMetaMask = provider.provider.isMetaMask;\n        if (!noMetamaskDeactivate || !isMetaMask) {\n            reportError(error);\n            deactivate();\n        }\n    }, []);\n    useEffect(() => {\n        setTimeout(async () => {\n            var _a, _b, _c;\n            try {\n                if (shouldConnectMetamask && autoConnect && !providerOverride) {\n                    await detectEthereumProvider();\n                    // If window.ethereum._state.accounts is non null but has no items,\n                    // it probably means that the user has disconnected Metamask manually.\n                    if (shouldConnectMetamask && ((_c = (_b = (_a = window.ethereum) === null || _a === void 0 ? void 0 : _a._state) === null || _b === void 0 ? void 0 : _b.accounts) === null || _c === void 0 ? void 0 : _c.length) === 0) {\n                        return;\n                    }\n                    await activateBrowserWallet();\n                }\n            }\n            catch (err) {\n                console.warn(err);\n            }\n        });\n    }, [shouldConnectMetamask, autoConnect, providerOverride]);\n    const activate = useCallback(async (provider) => {\n        var _a;\n        const wrappedProvider = Provider.isProvider(provider) ? provider : new Web3Provider(provider);\n        try {\n            setLoading(true);\n            const account = await tryToGetAccount(wrappedProvider);\n            const chainId = (_a = (await wrappedProvider.getNetwork())) === null || _a === void 0 ? void 0 : _a.chainId;\n            onUnsubscribe();\n            const clearSubscriptions = subscribeToProviderEvents(wrappedProvider.provider, update, onDisconnect(wrappedProvider), (chainId) => {\n                if (!isWebSocketProvider(wrappedProvider)) {\n                    wrappedProvider.pollingInterval = getPollingInterval(chainId);\n                }\n            });\n            setOnUnsubscribe(() => clearSubscriptions);\n            update({\n                provider: wrappedProvider,\n                chainId,\n                accounts: account ? [account] : [],\n            });\n        }\n        catch (err) {\n            reportError(err);\n            throw err;\n        }\n        finally {\n            setLoading(false);\n        }\n    }, [onUnsubscribe]);\n    return (_jsx(NetworkContext.Provider, { value: { network, update, activate, deactivate, reportError, activateBrowserWallet, isLoading }, children: children }));\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}