{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { WindowContext } from './context';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function WindowProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [isActiveWindow, setActiveWindow] = useState(true);\n  useEffect(() => {\n    const visibilityChangeListener = () => {\n      switch (document.visibilityState) {\n        case 'hidden':\n          setActiveWindow(false);\n          break;\n\n        case 'visible':\n          setActiveWindow(true);\n          break;\n      }\n    };\n\n    document.addEventListener('visibilitychange', visibilityChangeListener);\n    return () => document.removeEventListener('visibilitychange', visibilityChangeListener);\n  }, []);\n  return _jsx(WindowContext.Provider, {\n    value: {\n      isActive: isActiveWindow\n    },\n    children: children\n  });\n}","map":{"version":3,"sources":["../../../../../src/providers/window/provider.tsx"],"names":[],"mappings":";AAAA,SAAoB,QAApB,EAA8B,SAA9B,QAA+C,OAA/C;AACA,SAAS,aAAT,QAA8B,WAA9B;AAMA;;AAEG;;AACH,OAAM,SAAU,cAAV,OAA4C;EAAA,IAAnB;IAAE;EAAF,CAAmB;EAChD,MAAM,CAAC,cAAD,EAAiB,eAAjB,IAAoC,QAAQ,CAAC,IAAD,CAAlD;EAEA,SAAS,CAAC,MAAK;IACb,MAAM,wBAAwB,GAAG,MAAK;MACpC,QAAQ,QAAQ,CAAC,eAAjB;QACE,KAAK,QAAL;UACE,eAAe,CAAC,KAAD,CAAf;UACA;;QACF,KAAK,SAAL;UACE,eAAe,CAAC,IAAD,CAAf;UACA;MANJ;IAQD,CATD;;IAUA,QAAQ,CAAC,gBAAT,CAA0B,kBAA1B,EAA8C,wBAA9C;IACA,OAAO,MAAM,QAAQ,CAAC,mBAAT,CAA6B,kBAA7B,EAAiD,wBAAjD,CAAb;EACD,CAbQ,EAaN,EAbM,CAAT;EAeA,OAAO,IAAA,CAAC,aAAa,CAAC,QAAf,EAAuB;IAAC,KAAK,EAAE;MAAE,QAAQ,EAAE;IAAZ,CAAR;IAAsC,QAAQ,EAAE;EAAhD,CAAvB,CAAP;AACD","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { WindowContext } from './context';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function WindowProvider({ children }) {\n    const [isActiveWindow, setActiveWindow] = useState(true);\n    useEffect(() => {\n        const visibilityChangeListener = () => {\n            switch (document.visibilityState) {\n                case 'hidden':\n                    setActiveWindow(false);\n                    break;\n                case 'visible':\n                    setActiveWindow(true);\n                    break;\n            }\n        };\n        document.addEventListener('visibilitychange', visibilityChangeListener);\n        return () => document.removeEventListener('visibilitychange', visibilityChangeListener);\n    }, []);\n    return _jsx(WindowContext.Provider, { value: { isActive: isActiveWindow }, children: children });\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}