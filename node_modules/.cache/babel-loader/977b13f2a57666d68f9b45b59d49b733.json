{"ast":null,"code":"import { decodeUint, fail, wordLength } from '../common';\nexport function decodeAggregate(calldata) {\n  // function aggregate(tuple(address target, bytes callData)[] calls) public returns (tuple(uint256 blockNumber, bytes returnData)[])\n  const errorMethodId = '0x08c379a0';\n\n  if (calldata.startsWith(errorMethodId)) {\n    throw new Error('Multicall aggregate: call failed');\n  }\n\n  calldata = calldata.slice(2); // 'remove 0x prefix'\n\n  const getNumber = offset => decodeUint(calldata.slice(offset * wordLength, (offset + 1) * wordLength));\n\n  const blockNumber = getNumber(0); // The array offset must be 0x40 - blockNumber + array offset\n\n  if (getNumber(1) !== 0x40) {\n    fail();\n  }\n\n  const arraySize = getNumber(2);\n  const calls = [];\n\n  for (let i = 0; i < arraySize; i++) {\n    // offset of the call number i\n    const callOffset = 2 * getNumber(i + 3) + 3 * wordLength; // * 2 because 1 byte = 2 chars\n    // position of the call if we split calldata in chunks of 32 bytes\n\n    const pos = callOffset / wordLength; // returnData is encoded as its length and the data itself\n\n    const returnDataOffset = (pos + 1) * wordLength;\n    const returnDataLength = getNumber(pos);\n    const returnData = calldata.slice(returnDataOffset, returnDataOffset + 2 * returnDataLength); // * 2 because 1 byte = 2 chars\n\n    calls.push('0x' + returnData);\n  }\n\n  return [blockNumber, calls];\n}","map":{"version":3,"sources":["../../../../../src/abi/multicall/decoder.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,EAAqB,IAArB,EAA2B,UAA3B,QAA6C,WAA7C;AAEA,OAAM,SAAU,eAAV,CAA0B,QAA1B,EAA0C;EAC9C;EACA,MAAM,aAAa,GAAG,YAAtB;;EACA,IAAI,QAAQ,CAAC,UAAT,CAAoB,aAApB,CAAJ,EAAwC;IACtC,MAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;EACD;;EACD,QAAQ,GAAG,QAAQ,CAAC,KAAT,CAAe,CAAf,CAAX,CAN8C,CAMjB;;EAC7B,MAAM,SAAS,GAAI,MAAD,IAAoB,UAAU,CAAC,QAAQ,CAAC,KAAT,CAAe,MAAM,GAAG,UAAxB,EAAoC,CAAC,MAAM,GAAG,CAAV,IAAe,UAAnD,CAAD,CAAhD;;EAEA,MAAM,WAAW,GAAG,SAAS,CAAC,CAAD,CAA7B,CAT8C,CAU9C;;EACA,IAAI,SAAS,CAAC,CAAD,CAAT,KAAiB,IAArB,EAA2B;IACzB,IAAI;EACL;;EACD,MAAM,SAAS,GAAG,SAAS,CAAC,CAAD,CAA3B;EACA,MAAM,KAAK,GAAa,EAAxB;;EAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;IAClC;IACA,MAAM,UAAU,GAAG,IAAI,SAAS,CAAC,CAAC,GAAG,CAAL,CAAb,GAAuB,IAAI,UAA9C,CAFkC,CAEuB;IACzD;;IACA,MAAM,GAAG,GAAG,UAAU,GAAG,UAAzB,CAJkC,CAKlC;;IACA,MAAM,gBAAgB,GAAG,CAAC,GAAG,GAAG,CAAP,IAAY,UAArC;IACA,MAAM,gBAAgB,GAAG,SAAS,CAAC,GAAD,CAAlC;IACA,MAAM,UAAU,GAAG,QAAQ,CAAC,KAAT,CAAe,gBAAf,EAAiC,gBAAgB,GAAG,IAAI,gBAAxD,CAAnB,CARkC,CAQ2D;;IAC7F,KAAK,CAAC,IAAN,CAAW,OAAO,UAAlB;EACD;;EACD,OAAO,CAAC,WAAD,EAAc,KAAd,CAAP;AACD","sourceRoot":"","sourcesContent":["import { decodeUint, fail, wordLength } from '../common';\nexport function decodeAggregate(calldata) {\n    // function aggregate(tuple(address target, bytes callData)[] calls) public returns (tuple(uint256 blockNumber, bytes returnData)[])\n    const errorMethodId = '0x08c379a0';\n    if (calldata.startsWith(errorMethodId)) {\n        throw new Error('Multicall aggregate: call failed');\n    }\n    calldata = calldata.slice(2); // 'remove 0x prefix'\n    const getNumber = (offset) => decodeUint(calldata.slice(offset * wordLength, (offset + 1) * wordLength));\n    const blockNumber = getNumber(0);\n    // The array offset must be 0x40 - blockNumber + array offset\n    if (getNumber(1) !== 0x40) {\n        fail();\n    }\n    const arraySize = getNumber(2);\n    const calls = [];\n    for (let i = 0; i < arraySize; i++) {\n        // offset of the call number i\n        const callOffset = 2 * getNumber(i + 3) + 3 * wordLength; // * 2 because 1 byte = 2 chars\n        // position of the call if we split calldata in chunks of 32 bytes\n        const pos = callOffset / wordLength;\n        // returnData is encoded as its length and the data itself\n        const returnDataOffset = (pos + 1) * wordLength;\n        const returnDataLength = getNumber(pos);\n        const returnData = calldata.slice(returnDataOffset, returnDataOffset + 2 * returnDataLength); // * 2 because 1 byte = 2 chars\n        calls.push('0x' + returnData);\n    }\n    return [blockNumber, calls];\n}\n//# sourceMappingURL=decoder.js.map"]},"metadata":{},"sourceType":"module"}