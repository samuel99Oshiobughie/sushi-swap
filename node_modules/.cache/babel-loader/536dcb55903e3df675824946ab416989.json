{"ast":null,"code":"import { ERC20Interface } from '../constants';\nimport { useCalls } from './useCall';\nimport { Contract } from 'ethers';\n/**\n * Returns name, symbol, decimals and token supply of a given token.\n * @param tokenAddress address of a token contract.\n * @returns a token info object (see {@link TokenInfo}) or `undefined` if all four methods don't exist on a token.\n * @public\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const daiInfo = useToken(DAI_ADDRESS)\n *\n * return daiInfo ? (\n *   <>\n *     <p>Dai name: {daiInfo?.name}</p>\n *     <p>Dai symbol: {daiInfo?.symbol}</p>\n *     <p>Dai decimals: {daiInfo?.decimals}</p>\n *     <p>Dai totalSupply: {daiInfo?.totalSupply ? formatUnits(daiInfo?.totalSupply, daiInfo?.decimals) : ''}</p>\n *   </>\n * ) : null\n */\n\nexport function useToken(tokenAddress) {\n  var _a, _b;\n\n  const partialCall = tokenAddress && {\n    contract: new Contract(tokenAddress, ERC20Interface),\n    address: tokenAddress,\n    args: []\n  };\n  const args = ['name', 'symbol', 'decimals', 'totalSupply'].map(method => partialCall && Object.assign(Object.assign({}, partialCall), {\n    method\n  }));\n  const [name, symbol, decimals, totalSupply] = useCalls(args);\n\n  if (!name && !symbol && !decimals && !totalSupply) {\n    return undefined;\n  }\n\n  return {\n    name: (_a = name === null || name === void 0 ? void 0 : name.value[0]) !== null && _a !== void 0 ? _a : '',\n    symbol: (_b = symbol === null || symbol === void 0 ? void 0 : symbol.value[0]) !== null && _b !== void 0 ? _b : '',\n    decimals: decimals === null || decimals === void 0 ? void 0 : decimals.value[0],\n    totalSupply: totalSupply === null || totalSupply === void 0 ? void 0 : totalSupply.value[0]\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useToken.ts"],"names":[],"mappings":"AAAA,SAAS,cAAT,QAA+B,cAA/B;AAGA,SAAe,QAAf,QAA+B,WAA/B;AACA,SAAS,QAAT,QAAyB,QAAzB;AAEA;;;;;;;;;;;;;;;;;AAiBG;;AACH,OAAM,SAAU,QAAV,CAAmB,YAAnB,EAA+C;;;EACnD,MAAM,WAAW,GAAG,YAAY,IAAI;IAClC,QAAQ,EAAE,IAAI,QAAJ,CAAa,YAAb,EAA2B,cAA3B,CADwB;IAElC,OAAO,EAAE,YAFyB;IAGlC,IAAI,EAAE;EAH4B,CAApC;EAKA,MAAM,IAAI,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAA+B,aAA/B,EAA8C,GAA9C,CACV,MAAD,IAA0B,WAAW,IAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAS,WAAT,CAAA,EAAoB;IAAE;EAAF,CAApB,CAD1B,CAAb;EAGA,MAAM,CAAC,IAAD,EAAO,MAAP,EAAe,QAAf,EAAyB,WAAzB,IAAwC,QAAQ,CAAC,IAAD,CAAtD;;EAEA,IAAI,CAAC,IAAD,IAAS,CAAC,MAAV,IAAoB,CAAC,QAArB,IAAiC,CAAC,WAAtC,EAAmD;IACjD,OAAO,SAAP;EACD;;EAED,OAAO;IACL,IAAI,EAAE,CAAA,EAAA,GAAA,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,KAAN,CAAY,CAAZ,CAAA,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,EADnB;IAEL,MAAM,EAAE,CAAA,EAAA,GAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,KAAR,CAAc,CAAd,CAAA,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,EAAhB,GAAoB,EAFvB;IAGL,QAAQ,EAAE,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,KAAV,CAAgB,CAAhB,CAHL;IAIL,WAAW,EAAE,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAE,KAAb,CAAmB,CAAnB;EAJR,CAAP;AAMD","sourceRoot":"","sourcesContent":["import { ERC20Interface } from '../constants';\nimport { useCalls } from './useCall';\nimport { Contract } from 'ethers';\n/**\n * Returns name, symbol, decimals and token supply of a given token.\n * @param tokenAddress address of a token contract.\n * @returns a token info object (see {@link TokenInfo}) or `undefined` if all four methods don't exist on a token.\n * @public\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const daiInfo = useToken(DAI_ADDRESS)\n *\n * return daiInfo ? (\n *   <>\n *     <p>Dai name: {daiInfo?.name}</p>\n *     <p>Dai symbol: {daiInfo?.symbol}</p>\n *     <p>Dai decimals: {daiInfo?.decimals}</p>\n *     <p>Dai totalSupply: {daiInfo?.totalSupply ? formatUnits(daiInfo?.totalSupply, daiInfo?.decimals) : ''}</p>\n *   </>\n * ) : null\n */\nexport function useToken(tokenAddress) {\n    var _a, _b;\n    const partialCall = tokenAddress && {\n        contract: new Contract(tokenAddress, ERC20Interface),\n        address: tokenAddress,\n        args: [],\n    };\n    const args = ['name', 'symbol', 'decimals', 'totalSupply'].map((method) => partialCall && Object.assign(Object.assign({}, partialCall), { method }));\n    const [name, symbol, decimals, totalSupply] = useCalls(args);\n    if (!name && !symbol && !decimals && !totalSupply) {\n        return undefined;\n    }\n    return {\n        name: (_a = name === null || name === void 0 ? void 0 : name.value[0]) !== null && _a !== void 0 ? _a : '',\n        symbol: (_b = symbol === null || symbol === void 0 ? void 0 : symbol.value[0]) !== null && _b !== void 0 ? _b : '',\n        decimals: decimals === null || decimals === void 0 ? void 0 : decimals.value[0],\n        totalSupply: totalSupply === null || totalSupply === void 0 ? void 0 : totalSupply.value[0],\n    };\n}\n//# sourceMappingURL=useToken.js.map"]},"metadata":{},"sourceType":"module"}