{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function warnOnInvalidFilter(filter) {\n  if (!filter) {\n    return;\n  }\n\n  const {\n    contract,\n    event,\n    args\n  } = filter;\n  console.warn(`Invalid contract filter: address=${contract.address} event=${event} args=${args}`);\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function encodeFilterData(filter, fromBlock, toBlock, blockHash) {\n  if (!filter) {\n    return undefined;\n  }\n\n  const {\n    contract,\n    event,\n    args\n  } = filter;\n\n  if (!contract.address || !event) {\n    warnOnInvalidFilter(filter);\n    return undefined;\n  }\n\n  try {\n    const encodedTopics = contract.interface.encodeFilterTopics(event, args);\n\n    if (blockHash) {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        blockHash: blockHash\n      };\n    } else {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        fromBlock: fromBlock !== null && fromBlock !== void 0 ? fromBlock : 0,\n        toBlock: toBlock !== null && toBlock !== void 0 ? toBlock : 'latest'\n      };\n    }\n  } catch (e) {\n    if (e instanceof Error) {\n      return e;\n    } else {\n      warnOnInvalidFilter(filter);\n      return undefined;\n    }\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function decodeLogs(filter, result) {\n  if (!result || !filter) {\n    return undefined;\n  }\n\n  try {\n    if (result instanceof Error) {\n      return {\n        value: undefined,\n        error: result\n      };\n    }\n\n    const decodedLogs = [];\n\n    for (const log of result) {\n      const data = filter.contract.interface.decodeEventLog(filter.event, log.data, log.topics);\n      decodedLogs.push({\n        data,\n        blockNumber: log.blockNumber,\n        blockHash: log.blockHash,\n        transactionIndex: log.transactionIndex,\n        transactionHash: log.transactionHash,\n        removed: log.removed\n      });\n    }\n\n    return {\n      value: decodedLogs,\n      error: undefined\n    };\n  } catch (error) {\n    return {\n      value: undefined,\n      error: error\n    };\n  }\n}","map":{"version":3,"sources":["../../../../src/helpers/logs.ts"],"names":[],"mappings":"AAKA;;AAEG;AACH,OAAM,SAAU,mBAAV,CAA8B,MAA9B,EAAyD;EAC7D,IAAI,CAAC,MAAL,EAAa;IACX;EACD;;EACD,MAAM;IAAE,QAAF;IAAY,KAAZ;IAAmB;EAAnB,IAA4B,MAAlC;EACA,OAAO,CAAC,IAAR,CAAa,oCAAoC,QAAQ,CAAC,OAAO,UAAU,KAAK,SAAS,IAAI,EAA7F;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,gBAAV,CACJ,MADI,EAEJ,SAFI,EAGJ,OAHI,EAIJ,SAJI,EAIc;EAElB,IAAI,CAAC,MAAL,EAAa;IACX,OAAO,SAAP;EACD;;EACD,MAAM;IAAE,QAAF;IAAY,KAAZ;IAAmB;EAAnB,IAA4B,MAAlC;;EACA,IAAI,CAAC,QAAQ,CAAC,OAAV,IAAqB,CAAC,KAA1B,EAAiC;IAC/B,mBAAmB,CAAC,MAAD,CAAnB;IACA,OAAO,SAAP;EACD;;EACD,IAAI;IACF,MAAM,aAAa,GAAG,QAAQ,CAAC,SAAT,CAAmB,kBAAnB,CAAuC,KAAvC,EAAiF,IAAjF,CAAtB;;IAEA,IAAI,SAAJ,EAAe;MACb,OAAO;QACL,OAAO,EAAE,QAAQ,CAAC,OADb;QAEL,MAAM,EAAE,aAFH;QAGL,SAAS,EAAE;MAHN,CAAP;IAKD,CAND,MAMO;MACL,OAAO;QACL,OAAO,EAAE,QAAQ,CAAC,OADb;QAEL,MAAM,EAAE,aAFH;QAGL,SAAS,EAAE,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAA,SAAA,GAAa,CAHnB;QAIL,OAAO,EAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAA,OAAA,GAAW;MAJf,CAAP;IAMD;EACF,CAjBD,CAiBE,OAAO,CAAP,EAAU;IACV,IAAI,CAAC,YAAY,KAAjB,EAAwB;MACtB,OAAO,CAAP;IACD,CAFD,MAEO;MACL,mBAAmB,CAAC,MAAD,CAAnB;MACA,OAAO,SAAP;IACD;EACF;AACF;AAUD;;AAEG;;AACH,OAAM,SAAU,UAAV,CACJ,MADI,EAEJ,MAFI,EAEyB;EAE7B,IAAI,CAAC,MAAD,IAAW,CAAC,MAAhB,EAAwB;IACtB,OAAO,SAAP;EACD;;EACD,IAAI;IACF,IAAI,MAAM,YAAY,KAAtB,EAA6B;MAC3B,OAAO;QACL,KAAK,EAAE,SADF;QAEL,KAAK,EAAE;MAFF,CAAP;IAID;;IAED,MAAM,WAAW,GAA0C,EAA3D;;IAEA,KAAK,MAAM,GAAX,IAAkB,MAAlB,EAA0B;MACxB,MAAM,IAAI,GAAG,MAAM,CAAC,QAAP,CAAgB,SAAhB,CAA0B,cAA1B,CAAyC,MAAM,CAAC,KAAhD,EAAuD,GAAG,CAAC,IAA3D,EAAiE,GAAG,CAAC,MAArE,CAAb;MAEA,WAAW,CAAC,IAAZ,CAAiB;QACf,IADe;QAEf,WAAW,EAAE,GAAG,CAAC,WAFF;QAGf,SAAS,EAAE,GAAG,CAAC,SAHA;QAIf,gBAAgB,EAAE,GAAG,CAAC,gBAJP;QAKf,eAAe,EAAE,GAAG,CAAC,eALN;QAMf,OAAO,EAAE,GAAG,CAAC;MANE,CAAjB;IAQD;;IAED,OAAO;MACL,KAAK,EAAE,WADF;MAEL,KAAK,EAAE;IAFF,CAAP;EAID,CA3BD,CA2BE,OAAO,KAAP,EAAc;IACd,OAAO;MACL,KAAK,EAAE,SADF;MAEL,KAAK,EAAE;IAFF,CAAP;EAID;AACF","sourceRoot":"","sourcesContent":["/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function warnOnInvalidFilter(filter) {\n    if (!filter) {\n        return;\n    }\n    const { contract, event, args } = filter;\n    console.warn(`Invalid contract filter: address=${contract.address} event=${event} args=${args}`);\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function encodeFilterData(filter, fromBlock, toBlock, blockHash) {\n    if (!filter) {\n        return undefined;\n    }\n    const { contract, event, args } = filter;\n    if (!contract.address || !event) {\n        warnOnInvalidFilter(filter);\n        return undefined;\n    }\n    try {\n        const encodedTopics = contract.interface.encodeFilterTopics(event, args);\n        if (blockHash) {\n            return {\n                address: contract.address,\n                topics: encodedTopics,\n                blockHash: blockHash,\n            };\n        }\n        else {\n            return {\n                address: contract.address,\n                topics: encodedTopics,\n                fromBlock: fromBlock !== null && fromBlock !== void 0 ? fromBlock : 0,\n                toBlock: toBlock !== null && toBlock !== void 0 ? toBlock : 'latest',\n            };\n        }\n    }\n    catch (e) {\n        if (e instanceof Error) {\n            return e;\n        }\n        else {\n            warnOnInvalidFilter(filter);\n            return undefined;\n        }\n    }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function decodeLogs(filter, result) {\n    if (!result || !filter) {\n        return undefined;\n    }\n    try {\n        if (result instanceof Error) {\n            return {\n                value: undefined,\n                error: result,\n            };\n        }\n        const decodedLogs = [];\n        for (const log of result) {\n            const data = filter.contract.interface.decodeEventLog(filter.event, log.data, log.topics);\n            decodedLogs.push({\n                data,\n                blockNumber: log.blockNumber,\n                blockHash: log.blockHash,\n                transactionIndex: log.transactionIndex,\n                transactionHash: log.transactionHash,\n                removed: log.removed,\n            });\n        }\n        return {\n            value: decodedLogs,\n            error: undefined,\n        };\n    }\n    catch (error) {\n        return {\n            value: undefined,\n            error: error,\n        };\n    }\n}\n//# sourceMappingURL=logs.js.map"]},"metadata":{},"sourceType":"module"}