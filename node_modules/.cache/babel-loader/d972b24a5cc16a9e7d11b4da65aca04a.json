{"ast":null,"code":"import { getAddress } from 'ethers/lib/utils';\nimport { getAddNetworkParams } from '../helpers/getAddNetworkParams';\nimport { validateArguments } from '../helpers/validateArgument';\nimport { useNetwork } from '../providers';\nimport { useConfig } from '../hooks';\nimport { useReadonlyNetwork } from './useReadonlyProvider';\nimport { useEffect, useState } from 'react';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/EthWorks/useDapp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\n\nexport function useEthers() {\n  const {\n    network: {\n      provider: networkProvider,\n      chainId,\n      accounts,\n      errors\n    },\n    deactivate,\n    activate,\n    activateBrowserWallet,\n    isLoading\n  } = useNetwork();\n  const {\n    networks,\n    readOnlyUrls\n  } = useConfig();\n  const [error, setError] = useState(undefined);\n  const configuredChainIds = Object.keys(readOnlyUrls || {}).map(chainId => parseInt(chainId, 10));\n  const supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map(network => network.chainId);\n  useEffect(() => {\n    const isNotConfiguredChainId = chainId && configuredChainIds && configuredChainIds.indexOf(chainId) < 0;\n    const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;\n\n    if (isUnsupportedChainId || isNotConfiguredChainId) {\n      const chainIdError = new Error(`${isUnsupportedChainId ? 'Unsupported' : 'Not configured'} chain id: ${chainId}.`);\n      chainIdError.name = 'ChainIdError';\n      setError(chainIdError);\n      return;\n    }\n\n    setError(errors[errors.length - 1]);\n  }, [chainId, errors]);\n  const readonlyNetwork = useReadonlyNetwork();\n  const provider = networkProvider !== null && networkProvider !== void 0 ? networkProvider : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider;\n\n  const switchNetwork = async chainId => {\n    validateArguments({\n      chainId\n    }, {\n      chainId: 'number'\n    });\n\n    if (!provider) {\n      throw new Error('Provider not connected.');\n    }\n\n    try {\n      await provider.send('wallet_switchEthereumChain', [{\n        chainId: `0x${chainId.toString(16)}`\n      }]);\n    } catch (error) {\n      const errChainNotAddedYet = 4902; // Metamask error code\n\n      if (error.code === errChainNotAddedYet) {\n        const chain = networks === null || networks === void 0 ? void 0 : networks.find(chain => chain.chainId === chainId);\n\n        if (chain === null || chain === void 0 ? void 0 : chain.rpcUrl) {\n          await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n        }\n      } else {\n        throw error;\n      }\n    }\n  };\n\n  const account = accounts[0] ? getAddress(accounts[0]) : undefined;\n  return {\n    connector: undefined,\n    library: provider,\n    chainId: (error === null || error === void 0 ? void 0 : error.name) === 'ChainIdError' ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,\n    account,\n    active: !!provider,\n    activate: async providerOrConnector => {\n      if ('getProvider' in providerOrConnector) {\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n        await providerOrConnector.activate();\n        return activate(await providerOrConnector.getProvider());\n      }\n\n      return activate(providerOrConnector);\n    },\n    activateBrowserWallet,\n    deactivate,\n    setError: () => {\n      throw new Error('setError is deprecated');\n    },\n    error,\n    isLoading,\n    switchNetwork\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useEthers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getAddress } from 'ethers/lib/utils';\nimport { getAddNetworkParams } from '../helpers/getAddNetworkParams';\nimport { validateArguments } from '../helpers/validateArgument';\nimport { useNetwork } from '../providers';\nimport { useConfig } from '../hooks';\nimport { useReadonlyNetwork } from './useReadonlyProvider';\nimport { useEffect, useState } from 'react';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/EthWorks/useDapp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\nexport function useEthers() {\n    const { network: { provider: networkProvider, chainId, accounts, errors }, deactivate, activate, activateBrowserWallet, isLoading, } = useNetwork();\n    const { networks, readOnlyUrls } = useConfig();\n    const [error, setError] = useState(undefined);\n    const configuredChainIds = Object.keys(readOnlyUrls || {}).map((chainId) => parseInt(chainId, 10));\n    const supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map((network) => network.chainId);\n    useEffect(() => {\n        const isNotConfiguredChainId = chainId && configuredChainIds && configuredChainIds.indexOf(chainId) < 0;\n        const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;\n        if (isUnsupportedChainId || isNotConfiguredChainId) {\n            const chainIdError = new Error(`${isUnsupportedChainId ? 'Unsupported' : 'Not configured'} chain id: ${chainId}.`);\n            chainIdError.name = 'ChainIdError';\n            setError(chainIdError);\n            return;\n        }\n        setError(errors[errors.length - 1]);\n    }, [chainId, errors]);\n    const readonlyNetwork = useReadonlyNetwork();\n    const provider = networkProvider !== null && networkProvider !== void 0 ? networkProvider : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider;\n    const switchNetwork = async (chainId) => {\n        validateArguments({ chainId }, { chainId: 'number' });\n        if (!provider) {\n            throw new Error('Provider not connected.');\n        }\n        try {\n            await provider.send('wallet_switchEthereumChain', [{ chainId: `0x${chainId.toString(16)}` }]);\n        }\n        catch (error) {\n            const errChainNotAddedYet = 4902; // Metamask error code\n            if (error.code === errChainNotAddedYet) {\n                const chain = networks === null || networks === void 0 ? void 0 : networks.find((chain) => chain.chainId === chainId);\n                if (chain === null || chain === void 0 ? void 0 : chain.rpcUrl) {\n                    await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n                }\n            }\n            else {\n                throw error;\n            }\n        }\n    };\n    const account = accounts[0] ? getAddress(accounts[0]) : undefined;\n    return {\n        connector: undefined,\n        library: provider,\n        chainId: (error === null || error === void 0 ? void 0 : error.name) === 'ChainIdError' ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,\n        account,\n        active: !!provider,\n        activate: async (providerOrConnector) => {\n            if ('getProvider' in providerOrConnector) {\n                console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n                await providerOrConnector.activate();\n                return activate(await providerOrConnector.getProvider());\n            }\n            return activate(providerOrConnector);\n        },\n        activateBrowserWallet,\n        deactivate,\n        setError: () => {\n            throw new Error('setError is deprecated');\n        },\n        error,\n        isLoading,\n        switchNetwork,\n    };\n}\n//# sourceMappingURL=useEthers.js.map"]},"metadata":{},"sourceType":"module"}