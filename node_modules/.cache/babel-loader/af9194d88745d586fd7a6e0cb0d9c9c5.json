{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'ADD_CALLS') {\n    return [...state, ...action.calls.map(call => Object.assign(Object.assign({}, call), {\n      address: call.address.toLowerCase()\n    }))];\n  } else if (action.type === 'UPDATE_CALLS') {\n    return state.map(call => {\n      if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n        return call;\n      }\n\n      const blockNumber = action.blockNumber;\n      return Object.assign(Object.assign({}, call), {\n        lastUpdatedBlockNumber: blockNumber\n      });\n    });\n  } else {\n    let finalState = state;\n\n    for (const call of action.calls) {\n      const index = finalState.findIndex(x => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data);\n\n      if (index !== -1) {\n        finalState = finalState.filter((_, i) => i !== index);\n      }\n    }\n\n    return finalState;\n  }\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/callsReducer.ts"],"names":[],"mappings":"AA+CA;;AAEG;AACH,OAAM,SAAU,YAAV,GAA4D;EAAA,IAArC,KAAqC,uEAAlB,EAAkB;EAAA,IAAd,MAAc;;EAChE,IAAI,MAAM,CAAC,IAAP,KAAgB,WAApB,EAAiC;IAC/B,OAAO,CAAC,GAAG,KAAJ,EAAW,GAAG,MAAM,CAAC,KAAP,CAAa,GAAb,CAAkB,IAAD,IAAU,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,IAAN,CAAA,EAAU;MAAE,OAAO,EAAE,IAAI,CAAC,OAAL,CAAa,WAAb;IAAX,CAAV,CAA3B,CAAd,CAAP;EACD,CAFD,MAEO,IAAI,MAAM,CAAC,IAAP,KAAgB,cAApB,EAAoC;IACzC,OAAO,KAAK,CAAC,GAAN,CAAW,IAAD,IAAS;MACxB,IAAI,IAAI,CAAC,OAAL,KAAiB,MAAM,CAAC,OAAxB,IAAmC,CAAC,MAAM,CAAC,YAAP,CAAoB,QAApB,CAA6B,IAA7B,CAAxC,EAA4E;QAC1E,OAAO,IAAP;MACD;;MACD,MAAM,WAAW,GAAG,MAAM,CAAC,WAA3B;MACA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;QAAE,sBAAsB,EAAE;MAA1B,CAAhB,CAAA;IACD,CANM,CAAP;EAOD,CARM,MAQA;IACL,IAAI,UAAU,GAAG,KAAjB;;IACA,KAAK,MAAM,IAAX,IAAmB,MAAM,CAAC,KAA1B,EAAiC;MAC/B,MAAM,KAAK,GAAG,UAAU,CAAC,SAAX,CACX,CAAD,IAAO,CAAC,CAAC,OAAF,CAAU,WAAV,OAA4B,IAAI,CAAC,OAAL,CAAa,WAAb,EAA5B,IAA0D,CAAC,CAAC,IAAF,KAAW,IAAI,CAAC,IADrE,CAAd;;MAGA,IAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;QAChB,UAAU,GAAG,UAAU,CAAC,MAAX,CAAkB,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,KAAK,KAAlC,CAAb;MACD;IACF;;IACD,OAAO,UAAP;EACD;AACF","sourceRoot":"","sourcesContent":["/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer(state = [], action) {\n    if (action.type === 'ADD_CALLS') {\n        return [...state, ...action.calls.map((call) => (Object.assign(Object.assign({}, call), { address: call.address.toLowerCase() })))];\n    }\n    else if (action.type === 'UPDATE_CALLS') {\n        return state.map((call) => {\n            if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n                return call;\n            }\n            const blockNumber = action.blockNumber;\n            return Object.assign(Object.assign({}, call), { lastUpdatedBlockNumber: blockNumber });\n        });\n    }\n    else {\n        let finalState = state;\n        for (const call of action.calls) {\n            const index = finalState.findIndex((x) => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data);\n            if (index !== -1) {\n                finalState = finalState.filter((_, i) => i !== index);\n            }\n        }\n        return finalState;\n    }\n}\n//# sourceMappingURL=callsReducer.js.map"]},"metadata":{},"sourceType":"module"}