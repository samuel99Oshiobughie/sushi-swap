{"ast":null,"code":"import detectEthereumProvider from '@metamask/detect-provider';\nimport { providers } from 'ethers';\nimport { isWebSocketProvider } from './isWebSocketProvider';\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport async function getInjectedProvider(getPollingInterval) {\n  var _a;\n\n  if (!window.ethereum) {\n    window.open(GET_METAMASK_LINK);\n    return undefined;\n  }\n\n  const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum).providers || [];\n  const injectedProvider = (_a = injectedProviders.find(provider => {\n    var _a;\n\n    return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n  })) !== null && _a !== void 0 ? _a : await detectEthereumProvider();\n\n  if (!injectedProvider) {\n    window.open(GET_METAMASK_LINK);\n    return undefined;\n  }\n\n  const provider = new providers.Web3Provider(injectedProvider, 'any');\n  const chainId = await provider.send('eth_chainId', []);\n\n  if (!isWebSocketProvider(provider)) {\n    provider.pollingInterval = getPollingInterval(chainId);\n  }\n\n  return provider;\n}","map":{"version":3,"sources":["../../../../src/helpers/injectedProvider.ts"],"names":[],"mappings":"AAAA,OAAO,sBAAP,MAAmC,2BAAnC;AACA,SAAS,SAAT,QAA0B,QAA1B;AACA,SAAS,mBAAT,QAAoC,uBAApC;AAEA,MAAM,iBAAiB,GAAG,mCAA1B;AAEA,OAAO,eAAe,mBAAf,CAAmC,kBAAnC,EAAmF;;;EACxF,IAAI,CAAC,MAAM,CAAC,QAAZ,EAAsB;IACpB,MAAM,CAAC,IAAP,CAAY,iBAAZ;IACA,OAAO,SAAP;EACD;;EAED,MAAM,iBAAiB,GAAU,CAAC,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,QAAT,EAA0B,SAA1B,IAAuC,EAAxE;EACA,MAAM,gBAAgB,GACpB,CAAA,EAAA,GAAA,iBAAiB,CAAC,IAAlB,CAAwB,QAAD,IAAa;;;IAClC,OAAO,CAAA,EAAA,GAAA,QAAQ,CAAC,UAAT,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,EAAnB,GAAuB,KAA9B;EACD,CAFD,CAAA,MAEE,IAFF,IAEE,EAAA,KAAA,KAAA,CAFF,GAEE,EAFF,GAEO,MAAM,sBAAsB,EAHrC;;EAKA,IAAI,CAAC,gBAAL,EAAuB;IACrB,MAAM,CAAC,IAAP,CAAY,iBAAZ;IACA,OAAO,SAAP;EACD;;EAED,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,YAAd,CAA2B,gBAA3B,EAA6C,KAA7C,CAAjB;EACA,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,IAAT,CAAc,aAAd,EAA6B,EAA7B,CAAtB;;EACA,IAAI,CAAC,mBAAmB,CAAC,QAAD,CAAxB,EAAoC;IAClC,QAAQ,CAAC,eAAT,GAA2B,kBAAkB,CAAC,OAAD,CAA7C;EACD;;EACD,OAAO,QAAP;AACD","sourceRoot":"","sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\nimport { providers } from 'ethers';\nimport { isWebSocketProvider } from './isWebSocketProvider';\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport async function getInjectedProvider(getPollingInterval) {\n    var _a;\n    if (!window.ethereum) {\n        window.open(GET_METAMASK_LINK);\n        return undefined;\n    }\n    const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum).providers || [];\n    const injectedProvider = (_a = injectedProviders.find((provider) => {\n        var _a;\n        return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n    })) !== null && _a !== void 0 ? _a : (await detectEthereumProvider());\n    if (!injectedProvider) {\n        window.open(GET_METAMASK_LINK);\n        return undefined;\n    }\n    const provider = new providers.Web3Provider(injectedProvider, 'any');\n    const chainId = await provider.send('eth_chainId', []);\n    if (!isWebSocketProvider(provider)) {\n        provider.pollingInterval = getPollingInterval(chainId);\n    }\n    return provider;\n}\n//# sourceMappingURL=injectedProvider.js.map"]},"metadata":{},"sourceType":"module"}