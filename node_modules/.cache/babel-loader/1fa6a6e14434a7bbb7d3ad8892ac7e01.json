{"ast":null,"code":"import { Contract } from 'ethers';\nimport { ERC20Interface } from '../constants';\nimport { useCall } from './useCall';\n/**\n * Returns allowance (tokens left to use by spender) for given token owner - spender relationship.\n * @param tokenAddress address of a token contract\n * @param ownerAddress address of an account to which tokens are linked\n * @param spenderAddress address of an account allowed to spend tokens\n * @param queryParams see {@link QueryParams}.\n * @returns an allowance which is `BigNumber`, or `undefined` if any address or token is `Falsy` or not connected.\n * @public\n * @example\n * const TOKEN_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const SPENDER_ADDRESS = '0xA193E42526F1FEA8C99AF609dcEabf30C1c29fAA'\n * const { account, chainId } = useEthers()\n * const allowance = useTokenAllowance(TOKEN_ADDRESS, account, SPENDER_ADDRESS)\n *\n * return (\n *   {allowance && <p>Remaining allowance: {formatUnits(allowance, 18)} tokens</p>}\n * )\n */\n\nexport function useTokenAllowance(tokenAddress, ownerAddress, spenderAddress) {\n  let queryParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var _a;\n\n  const {\n    value: allowance\n  } = (_a = useCall(ownerAddress && spenderAddress && tokenAddress && {\n    contract: new Contract(tokenAddress, ERC20Interface),\n    method: 'allowance',\n    args: [ownerAddress, spenderAddress]\n  }, queryParams)) !== null && _a !== void 0 ? _a : {};\n  return allowance === null || allowance === void 0 ? void 0 : allowance[0];\n}","map":{"version":3,"sources":["../../../../src/hooks/useTokenAllowance.ts"],"names":[],"mappings":"AACA,SAAS,QAAT,QAAyB,QAAzB;AACA,SAAS,cAAT,QAA+B,cAA/B;AAGA,SAAS,OAAT,QAAwB,WAAxB;AAEA;;;;;;;;;;;;;;;;;AAiBG;;AACH,OAAM,SAAU,iBAAV,CACJ,YADI,EAEJ,YAFI,EAGJ,cAHI,EAIyB;EAAA,IAA7B,WAA6B,uEAAF,EAAE;;;;EAE7B,MAAM;IAAE,KAAK,EAAE;EAAT,IACJ,CAAA,EAAA,GAAA,OAAO,CACL,YAAY,IACV,cADF,IAEE,YAFF,IAEkB;IACd,QAAQ,EAAE,IAAI,QAAJ,CAAa,YAAb,EAA2B,cAA3B,CADI;IAEd,MAAM,EAAE,WAFM;IAGd,IAAI,EAAE,CAAC,YAAD,EAAe,cAAf;EAHQ,CAHb,EAQL,WARK,CAAP,MASC,IATD,IASC,EAAA,KAAA,KAAA,CATD,GASC,EATD,GASK,EAVP;EAWA,OAAO,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAA,SAAS,CAAG,CAAH,CAAhB;AACD","sourceRoot":"","sourcesContent":["import { Contract } from 'ethers';\nimport { ERC20Interface } from '../constants';\nimport { useCall } from './useCall';\n/**\n * Returns allowance (tokens left to use by spender) for given token owner - spender relationship.\n * @param tokenAddress address of a token contract\n * @param ownerAddress address of an account to which tokens are linked\n * @param spenderAddress address of an account allowed to spend tokens\n * @param queryParams see {@link QueryParams}.\n * @returns an allowance which is `BigNumber`, or `undefined` if any address or token is `Falsy` or not connected.\n * @public\n * @example\n * const TOKEN_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const SPENDER_ADDRESS = '0xA193E42526F1FEA8C99AF609dcEabf30C1c29fAA'\n * const { account, chainId } = useEthers()\n * const allowance = useTokenAllowance(TOKEN_ADDRESS, account, SPENDER_ADDRESS)\n *\n * return (\n *   {allowance && <p>Remaining allowance: {formatUnits(allowance, 18)} tokens</p>}\n * )\n */\nexport function useTokenAllowance(tokenAddress, ownerAddress, spenderAddress, queryParams = {}) {\n    var _a;\n    const { value: allowance } = (_a = useCall(ownerAddress &&\n        spenderAddress &&\n        tokenAddress && {\n        contract: new Contract(tokenAddress, ERC20Interface),\n        method: 'allowance',\n        args: [ownerAddress, spenderAddress],\n    }, queryParams)) !== null && _a !== void 0 ? _a : {};\n    return allowance === null || allowance === void 0 ? void 0 : allowance[0];\n}\n//# sourceMappingURL=useTokenAllowance.js.map"]},"metadata":{},"sourceType":"module"}