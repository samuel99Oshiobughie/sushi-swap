{"ast":null,"code":"import { Contract } from 'ethers';\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2';\nconst ABI = ['function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])'];\n/**\n * @public\n */\n\nexport const multicall2Factory = fastEncoding => fastEncoding ? fastEncodingMulticall2 : multicall2;\n/**\n * @public\n */\n\nexport async function multicall2(provider, address, blockNumber, requests) {\n  if (requests.length === 0) {\n    return {};\n  }\n\n  const contract = new Contract(address, ABI, provider);\n  const results = await contract.tryAggregate(false, requests.map(_ref => {\n    let {\n      address,\n      data\n    } = _ref;\n    return [address, data];\n  }), {\n    blockTag: blockNumber\n  });\n  return decodeResult(results, requests);\n}\n/**\n * @public\n */\n\nexport async function fastEncodingMulticall2(provider, address, blockNumber, requests) {\n  if (requests.length === 0) {\n    return {};\n  }\n\n  const response = await provider.call({\n    to: address,\n    data: encodeTryAggregate(false, requests.map(_ref2 => {\n      let {\n        address,\n        data\n      } = _ref2;\n      return [address, data];\n    }))\n  }, blockNumber);\n  const [results] = decodeTryAggregate(response);\n  return decodeResult(results, requests);\n}\n\nfunction decodeResult(results, requests) {\n  var _a;\n\n  const state = {};\n\n  for (let i = 0; i < requests.length; i++) {\n    const {\n      address,\n      data\n    } = requests[i];\n    const [success, value] = results[i];\n    const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      success,\n      value\n    };\n    state[address] = stateForAddress;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/multicall2.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAoC,QAApC;AACA,SAAS,kBAAT,EAA6B,kBAA7B,QAAuD,yBAAvD;AAIA,MAAM,GAAG,GAAG,CACV,yJADU,CAAZ;AAIA;;AAEG;;AACH,OAAO,MAAM,iBAAiB,GAAI,YAAD,IAA4B,YAAY,GAAG,sBAAH,GAA4B,UAA9F;AAEP;;AAEG;;AACH,OAAO,eAAe,UAAf,CACL,QADK,EAEL,OAFK,EAGL,WAHK,EAIL,QAJK,EAIc;EAEnB,IAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;IACzB,OAAO,EAAP;EACD;;EACD,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,OAAb,EAAsB,GAAtB,EAA2B,QAA3B,CAAjB;EACA,MAAM,OAAO,GAAwB,MAAM,QAAQ,CAAC,YAAT,CACzC,KADyC,EAEzC,QAAQ,CAAC,GAAT,CAAa;IAAA,IAAC;MAAE,OAAF;MAAW;IAAX,CAAD;IAAA,OAAuB,CAAC,OAAD,EAAU,IAAV,CAAvB;EAAA,CAAb,CAFyC,EAGzC;IAAE,QAAQ,EAAE;EAAZ,CAHyC,CAA3C;EAKA,OAAO,YAAY,CAAC,OAAD,EAAU,QAAV,CAAnB;AACD;AAED;;AAEG;;AACH,OAAO,eAAe,sBAAf,CACL,QADK,EAEL,OAFK,EAGL,WAHK,EAIL,QAJK,EAIc;EAEnB,IAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;IACzB,OAAO,EAAP;EACD;;EACD,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAT,CACrB;IACE,EAAE,EAAE,OADN;IAEE,IAAI,EAAE,kBAAkB,CACtB,KADsB,EAEtB,QAAQ,CAAC,GAAT,CAAa;MAAA,IAAC;QAAE,OAAF;QAAW;MAAX,CAAD;MAAA,OAAuB,CAAC,OAAD,EAAU,IAAV,CAAvB;IAAA,CAAb,CAFsB;EAF1B,CADqB,EAQrB,WARqB,CAAvB;EAUA,MAAM,CAAC,OAAD,IAAY,kBAAkB,CAAC,QAAD,CAApC;EACA,OAAO,YAAY,CAAC,OAAD,EAAU,QAAV,CAAnB;AACD;;AAED,SAAS,YAAT,CAAsB,OAAtB,EAAoD,QAApD,EAAuE;;;EACrE,MAAM,KAAK,GAAe,EAA1B;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;IACxC,MAAM;MAAE,OAAF;MAAW;IAAX,IAAoB,QAAQ,CAAC,CAAD,CAAlC;IACA,MAAM,CAAC,OAAD,EAAU,KAAV,IAAmB,OAAO,CAAC,CAAD,CAAhC;IACA,MAAM,eAAe,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,OAAD,CAAL,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,EAA1C;IACA,eAAe,CAAC,IAAD,CAAf,GAAwB;MAAE,OAAF;MAAW;IAAX,CAAxB;IACA,KAAK,CAAC,OAAD,CAAL,GAAiB,eAAjB;EACD;;EACD,OAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["import { Contract } from 'ethers';\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2';\nconst ABI = [\n    'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])',\n];\n/**\n * @public\n */\nexport const multicall2Factory = (fastEncoding) => (fastEncoding ? fastEncodingMulticall2 : multicall2);\n/**\n * @public\n */\nexport async function multicall2(provider, address, blockNumber, requests) {\n    if (requests.length === 0) {\n        return {};\n    }\n    const contract = new Contract(address, ABI, provider);\n    const results = await contract.tryAggregate(false, requests.map(({ address, data }) => [address, data]), { blockTag: blockNumber });\n    return decodeResult(results, requests);\n}\n/**\n * @public\n */\nexport async function fastEncodingMulticall2(provider, address, blockNumber, requests) {\n    if (requests.length === 0) {\n        return {};\n    }\n    const response = await provider.call({\n        to: address,\n        data: encodeTryAggregate(false, requests.map(({ address, data }) => [address, data])),\n    }, blockNumber);\n    const [results] = decodeTryAggregate(response);\n    return decodeResult(results, requests);\n}\nfunction decodeResult(results, requests) {\n    var _a;\n    const state = {};\n    for (let i = 0; i < requests.length; i++) {\n        const { address, data } = requests[i];\n        const [success, value] = results[i];\n        const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n        stateForAddress[data] = { success, value };\n        state[address] = stateForAddress;\n    }\n    return state;\n}\n//# sourceMappingURL=multicall2.js.map"]},"metadata":{},"sourceType":"module"}