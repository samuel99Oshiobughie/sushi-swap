{"ast":null,"code":"import { useMemo } from 'react';\nimport { useRawLogs } from './useRawLogs';\nimport { decodeLogs, encodeFilterData } from '../helpers';\n/**\n * Makes a call to get the logs for a specific contract event and returns the decoded logs or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * A syntax sugar for {@link useRawLogs} that uses ABI, event name, and arguments instead of raw data.\n * @param filter an event filter (see {@link TypedFilter})\n * @param queryParams allows for additional configuration of the query (see {@link LogQueryParams})\n * @returns an array of decoded logs (see {@link LogsResult})\n * @public\n */\n\nexport function useLogs(filter) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    fromBlock,\n    toBlock,\n    blockHash\n  } = queryParams;\n  const rawFilter = useMemo(() => encodeFilterData(filter, fromBlock, toBlock, blockHash), [filter, fromBlock, toBlock, blockHash]);\n  const result = useRawLogs(rawFilter instanceof Error ? undefined : rawFilter, queryParams);\n  return useMemo(() => decodeLogs(filter, rawFilter instanceof Error ? rawFilter : result), [result, filter, rawFilter]);\n}","map":{"version":3,"sources":["../../../../src/hooks/useLogs.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,OAAxB;AAGA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAqB,UAArB,EAAiC,gBAAjC,QAAyD,YAAzD;AAeA;;;;;;;;AAQG;;AACH,OAAM,SAAU,OAAV,CACJ,MADI,EAE4B;EAAA,IAAhC,WAAgC,uEAAF,EAAE;EAEhC,MAAM;IAAE,SAAF;IAAa,OAAb;IAAsB;EAAtB,IAAoC,WAA1C;EAEA,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,gBAAgB,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,EAA6B,SAA7B,CAAvB,EAAgE,CACvF,MADuF,EAEvF,SAFuF,EAGvF,OAHuF,EAIvF,SAJuF,CAAhE,CAAzB;EAMA,MAAM,MAAM,GAAG,UAAU,CAAC,SAAS,YAAY,KAArB,GAA6B,SAA7B,GAAyC,SAA1C,EAAqD,WAArD,CAAzB;EACA,OAAO,OAAO,CAAC,MAAM,UAAU,CAAC,MAAD,EAAS,SAAS,YAAY,KAArB,GAA6B,SAA7B,GAAyC,MAAlD,CAAjB,EAA4E,CAAC,MAAD,EAAS,MAAT,EAAiB,SAAjB,CAA5E,CAAd;AACD","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nimport { useRawLogs } from './useRawLogs';\nimport { decodeLogs, encodeFilterData } from '../helpers';\n/**\n * Makes a call to get the logs for a specific contract event and returns the decoded logs or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * A syntax sugar for {@link useRawLogs} that uses ABI, event name, and arguments instead of raw data.\n * @param filter an event filter (see {@link TypedFilter})\n * @param queryParams allows for additional configuration of the query (see {@link LogQueryParams})\n * @returns an array of decoded logs (see {@link LogsResult})\n * @public\n */\nexport function useLogs(filter, queryParams = {}) {\n    const { fromBlock, toBlock, blockHash } = queryParams;\n    const rawFilter = useMemo(() => encodeFilterData(filter, fromBlock, toBlock, blockHash), [\n        filter,\n        fromBlock,\n        toBlock,\n        blockHash,\n    ]);\n    const result = useRawLogs(rawFilter instanceof Error ? undefined : rawFilter, queryParams);\n    return useMemo(() => decodeLogs(filter, rawFilter instanceof Error ? rawFilter : result), [result, filter, rawFilter]);\n}\n//# sourceMappingURL=useLogs.js.map"]},"metadata":{},"sourceType":"module"}