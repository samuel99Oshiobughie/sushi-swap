{"ast":null,"code":"import { MultiCallABI } from '../constants';\nimport { BigNumber } from 'ethers';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useRawCall } from './useRawCalls';\nimport { useChainId } from './useChainId';\nimport { useConfig } from './useConfig';\nimport { useBlockNumbers } from './useBlockNumbers';\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\n/**\n * Queries block metadata.\n * @public\n */\n\nexport function useBlockMeta() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _a, _b;\n\n  const chainId = useChainId({\n    queryParams\n  });\n  const {\n    refresh: configRefresh\n  } = useConfig();\n  const blockNumbers = useBlockNumbers();\n  const address = useMulticallAddress(queryParams);\n  const refresh = (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : configRefresh;\n  const isStatic = (_b = queryParams.isStatic) !== null && _b !== void 0 ? _b : refresh === 'never';\n  const refreshPerBlocks = typeof refresh === 'number' ? refresh : undefined;\n  const timestamp = useRawCall(address && chainId !== undefined && {\n    address,\n    data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,\n    chainId,\n    isStatic,\n    refreshPerBlocks\n  });\n  const difficulty = useRawCall(address && chainId !== undefined && {\n    address,\n    data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,\n    chainId,\n    isStatic,\n    refreshPerBlocks\n  });\n  return {\n    timestamp: timestamp !== undefined ? new Date(BigNumber.from(timestamp.value).mul(1000).toNumber()) : undefined,\n    difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined,\n    blockNumber: chainId ? blockNumbers[chainId] : undefined\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useBlockMeta.ts"],"names":[],"mappings":"AAAA,SAAkB,YAAlB,QAAsC,cAAtC;AACA,SAAS,SAAT,QAA0B,QAA1B;AACA,SAAS,mBAAT,QAAoC,uBAApC;AAEA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,eAAT,QAAgC,mBAAhC;AAEA,MAAM,gCAAgC,GAAG,YAAY,CAAC,kBAAb,CAAgC,0BAAhC,EAA4D,EAA5D,CAAzC;AACA,MAAM,iCAAiC,GAAG,YAAY,CAAC,kBAAb,CAAgC,2BAAhC,EAA6D,EAA7D,CAA1C;AAEA;;;AAGG;;AACH,OAAM,SAAU,YAAV,GAAoD;EAAA,IAA7B,WAA6B,uEAAF,EAAE;;;;EACxD,MAAM,OAAO,GAAG,UAAU,CAAC;IAAE;EAAF,CAAD,CAA1B;EACA,MAAM;IAAE,OAAO,EAAE;EAAX,IAA6B,SAAS,EAA5C;EACA,MAAM,YAAY,GAAG,eAAe,EAApC;EAEA,MAAM,OAAO,GAAG,mBAAmB,CAAC,WAAD,CAAnC;EACA,MAAM,OAAO,GAAG,CAAA,EAAA,GAAA,WAAW,CAAC,OAAZ,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,EAAnB,GAAuB,aAAvC;EACA,MAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,WAAW,CAAC,QAAZ,MAAoB,IAApB,IAAoB,EAAA,KAAA,KAAA,CAApB,GAAoB,EAApB,GAAwB,OAAO,KAAK,OAArD;EACA,MAAM,gBAAgB,GAAG,OAAO,OAAP,KAAmB,QAAnB,GAA8B,OAA9B,GAAwC,SAAjE;EACA,MAAM,SAAS,GAAG,UAAU,CAC1B,OAAO,IACL,OAAO,KAAK,SADd,IAC2B;IACvB,OADuB;IAEvB,IAAI,EAAE,gCAFiB;IAGvB,OAHuB;IAIvB,QAJuB;IAKvB;EALuB,CAFD,CAA5B;EAUA,MAAM,UAAU,GAAG,UAAU,CAC3B,OAAO,IACL,OAAO,KAAK,SADd,IAC2B;IACvB,OADuB;IAEvB,IAAI,EAAE,iCAFiB;IAGvB,OAHuB;IAIvB,QAJuB;IAKvB;EALuB,CAFA,CAA7B;EAWA,OAAO;IACL,SAAS,EAAE,SAAS,KAAK,SAAd,GAA0B,IAAI,IAAJ,CAAS,SAAS,CAAC,IAAV,CAAe,SAAS,CAAC,KAAzB,EAAgC,GAAhC,CAAoC,IAApC,EAA0C,QAA1C,EAAT,CAA1B,GAA2F,SADjG;IAEL,UAAU,EAAE,UAAU,KAAK,SAAf,GAA2B,SAAS,CAAC,IAAV,CAAe,UAAU,CAAC,KAA1B,CAA3B,GAA8D,SAFrE;IAGL,WAAW,EAAE,OAAO,GAAG,YAAY,CAAC,OAAD,CAAf,GAAsC;EAHrD,CAAP;AAKD","sourceRoot":"","sourcesContent":["import { MultiCallABI } from '../constants';\nimport { BigNumber } from 'ethers';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useRawCall } from './useRawCalls';\nimport { useChainId } from './useChainId';\nimport { useConfig } from './useConfig';\nimport { useBlockNumbers } from './useBlockNumbers';\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\n/**\n * Queries block metadata.\n * @public\n */\nexport function useBlockMeta(queryParams = {}) {\n    var _a, _b;\n    const chainId = useChainId({ queryParams });\n    const { refresh: configRefresh } = useConfig();\n    const blockNumbers = useBlockNumbers();\n    const address = useMulticallAddress(queryParams);\n    const refresh = (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : configRefresh;\n    const isStatic = (_b = queryParams.isStatic) !== null && _b !== void 0 ? _b : refresh === 'never';\n    const refreshPerBlocks = typeof refresh === 'number' ? refresh : undefined;\n    const timestamp = useRawCall(address &&\n        chainId !== undefined && {\n        address,\n        data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,\n        chainId,\n        isStatic,\n        refreshPerBlocks,\n    });\n    const difficulty = useRawCall(address &&\n        chainId !== undefined && {\n        address,\n        data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,\n        chainId,\n        isStatic,\n        refreshPerBlocks,\n    });\n    return {\n        timestamp: timestamp !== undefined ? new Date(BigNumber.from(timestamp.value).mul(1000).toNumber()) : undefined,\n        difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined,\n        blockNumber: chainId ? blockNumbers[chainId] : undefined,\n    };\n}\n//# sourceMappingURL=useBlockMeta.js.map"]},"metadata":{},"sourceType":"module"}