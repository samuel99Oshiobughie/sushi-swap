{"ast":null,"code":"import { useEffect, useState } from 'react';\n/**\n * Debounce a pair of values of types T and U.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n\n * This function is used for debouncing multicall until enough calls are aggregated.\n * @param first first variable to be debounced\n * @param second second variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns {} debounced values `[T, U]`\n */\n\nexport function useDebouncePair(first, second, delay) {\n  const [debouncedValue, setDebouncedValue] = useState([first, second]);\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue([first, second]);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [first, second, delay]);\n  return debouncedValue;\n}","map":{"version":3,"sources":["../../../../src/hooks/useDebouncePair.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;AAEA;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,eAAV,CAAgC,KAAhC,EAA0C,MAA1C,EAAqD,KAArD,EAAkE;EACtE,MAAM,CAAC,cAAD,EAAiB,iBAAjB,IAAsC,QAAQ,CAAS,CAAC,KAAD,EAAQ,MAAR,CAAT,CAApD;EAEA,SAAS,CAAC,MAAK;IACb;IACA,MAAM,OAAO,GAAG,UAAU,CAAC,MAAK;MAC9B,iBAAiB,CAAC,CAAC,KAAD,EAAQ,MAAR,CAAD,CAAjB;IACD,CAFyB,EAEvB,KAFuB,CAA1B,CAFa,CAMb;IACA;IACA;;IACA,OAAO,MAAK;MACV,YAAY,CAAC,OAAD,CAAZ;IACD,CAFD;EAGD,CAZQ,EAYN,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,CAZM,CAAT;EAcA,OAAO,cAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\n/**\n * Debounce a pair of values of types T and U.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n\n * This function is used for debouncing multicall until enough calls are aggregated.\n * @param first first variable to be debounced\n * @param second second variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns {} debounced values `[T, U]`\n */\nexport function useDebouncePair(first, second, delay) {\n    const [debouncedValue, setDebouncedValue] = useState([first, second]);\n    useEffect(() => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n            setDebouncedValue([first, second]);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [first, second, delay]);\n    return debouncedValue;\n}\n//# sourceMappingURL=useDebouncePair.js.map"]},"metadata":{},"sourceType":"module"}