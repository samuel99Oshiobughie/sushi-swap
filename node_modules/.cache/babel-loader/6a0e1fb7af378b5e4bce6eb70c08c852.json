{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers, useBlockNumber } from '../hooks';\n/**\n * Returns all blockchain logs given a block filter.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * @see {@link useLogs} for a more easy-to-use version of the query.\n * @param filter an event filter, which blocks to query\n * @param queryParams allows for additional configuration of the query (see {@link QueryParams})\n * @returns an array of [logs](https://docs.ethers.io/v5/api/providers/types/#providers-Log)\n * @public\n */\n\nexport function useRawLogs(filter) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    library\n  } = useEthers();\n  const providers = useReadonlyNetworks();\n\n  const _blockNumber = useBlockNumber();\n\n  const blockNumbers = useBlockNumbers();\n  const [logs, setLogs] = useState();\n  const {\n    chainId\n  } = queryParams;\n  const [provider, blockNumber] = useMemo(() => chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber], [providers, library, blockNumbers, _blockNumber, chainId]);\n\n  async function updateLogs() {\n    setLogs(!filter ? undefined : await (provider === null || provider === void 0 ? void 0 : provider.getLogs(filter)));\n  }\n\n  useEffect(() => {\n    void updateLogs();\n  }, [provider, blockNumber]);\n  return logs;\n}","map":{"version":3,"sources":["../../../../src/hooks/useRawLogs.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,OAApB,EAA6B,QAA7B,QAA6C,OAA7C;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,mBAAT,QAAoC,uCAApC;AACA,SAAS,eAAT,EAA0B,cAA1B,QAAgD,UAAhD;AAKA;;;;;;;;AAQG;;AACH,OAAM,SAAU,UAAV,CACJ,MADI,EAEyB;EAAA,IAA7B,WAA6B,uEAAF,EAAE;EAE7B,MAAM;IAAE;EAAF,IAAc,SAAS,EAA7B;EACA,MAAM,SAAS,GAAG,mBAAmB,EAArC;;EACA,MAAM,YAAY,GAAG,cAAc,EAAnC;;EACA,MAAM,YAAY,GAAG,eAAe,EAApC;EAEA,MAAM,CAAC,IAAD,EAAO,OAAP,IAAkB,QAAQ,EAAhC;EAEA,MAAM;IAAE;EAAF,IAAc,WAApB;EAEA,MAAM,CAAC,QAAD,EAAW,WAAX,IAA0B,OAAO,CACrC,MAAO,OAAO,GAAG,CAAC,SAAS,CAAC,OAAD,CAAV,EAAqB,YAAY,CAAC,OAAD,CAAjC,CAAH,GAAiD,CAAC,OAAD,EAAU,YAAV,CAD1B,EAErC,CAAC,SAAD,EAAY,OAAZ,EAAqB,YAArB,EAAmC,YAAnC,EAAiD,OAAjD,CAFqC,CAAvC;;EAKA,eAAe,UAAf,GAAyB;IACvB,OAAO,CAAC,CAAC,MAAD,GAAU,SAAV,GAAsB,OAAM,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,OAAV,CAAkB,MAAlB,CAAN,CAAvB,CAAP;EACD;;EAED,SAAS,CAAC,MAAK;IACb,KAAK,UAAU,EAAf;EACD,CAFQ,EAEN,CAAC,QAAD,EAAW,WAAX,CAFM,CAAT;EAIA,OAAO,IAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers, useBlockNumber } from '../hooks';\n/**\n * Returns all blockchain logs given a block filter.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * @see {@link useLogs} for a more easy-to-use version of the query.\n * @param filter an event filter, which blocks to query\n * @param queryParams allows for additional configuration of the query (see {@link QueryParams})\n * @returns an array of [logs](https://docs.ethers.io/v5/api/providers/types/#providers-Log)\n * @public\n */\nexport function useRawLogs(filter, queryParams = {}) {\n    const { library } = useEthers();\n    const providers = useReadonlyNetworks();\n    const _blockNumber = useBlockNumber();\n    const blockNumbers = useBlockNumbers();\n    const [logs, setLogs] = useState();\n    const { chainId } = queryParams;\n    const [provider, blockNumber] = useMemo(() => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]), [providers, library, blockNumbers, _blockNumber, chainId]);\n    async function updateLogs() {\n        setLogs(!filter ? undefined : await (provider === null || provider === void 0 ? void 0 : provider.getLogs(filter)));\n    }\n    useEffect(() => {\n        void updateLogs();\n    }, [provider, blockNumber]);\n    return logs;\n}\n//# sourceMappingURL=useRawLogs.js.map"]},"metadata":{},"sourceType":"module"}