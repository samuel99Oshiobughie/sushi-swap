{"ast":null,"code":"import { decodeUint, wordLength, fail } from '../common';\nexport function decodeTryAggregate(calldata) {\n  // function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public returns (tuple(bool success, bytes returnData)[])\n  const errorMethodId = '0x08c379a0';\n\n  if (calldata.startsWith(errorMethodId)) {\n    throw new Error('Multicall2 aggregate: call failed');\n  }\n\n  calldata = calldata.slice(2); // 'remove 0x prefix'\n\n  const getNumber = offset => decodeUint(calldata.slice(offset * wordLength, (offset + 1) * wordLength)); // The array offset must be 0x20 - nothing is before the array\n\n\n  if (getNumber(0) !== 0x20) {\n    fail();\n  }\n\n  const arraySize = getNumber(1);\n  const calls = [];\n\n  for (let i = 0; i < arraySize; i++) {\n    // offset of the call number i\n    const callOffset = 2 * getNumber(i + 2) + 2 * wordLength; // position of the call if we split calldata in chunks of 32 bytes\n\n    const pos = callOffset / wordLength; // returnData is encoded as a flag showing if the call was successful,\n    // data offset, which should be equal to 0x40, data length and the data itself\n\n    const successEncoded = getNumber(pos);\n\n    if (successEncoded !== 1 && successEncoded !== 0) {\n      fail();\n    }\n\n    const success = successEncoded === 1;\n\n    if (getNumber(pos + 1) !== 0x40) {\n      fail();\n    }\n\n    const returnDataOffset = (pos + 3) * wordLength;\n    const returnDataLength = getNumber(pos + 2);\n    const returnData = calldata.slice(returnDataOffset, returnDataOffset + 2 * returnDataLength);\n    const call = [success, '0x' + returnData];\n    calls.push(call);\n  }\n\n  return [calls];\n}","map":{"version":3,"sources":["../../../../../src/abi/multicall2/decoder.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,EAAqB,UAArB,EAAiC,IAAjC,QAA6C,WAA7C;AAEA,OAAM,SAAU,kBAAV,CAA6B,QAA7B,EAA6C;EACjD;EACA,MAAM,aAAa,GAAG,YAAtB;;EACA,IAAI,QAAQ,CAAC,UAAT,CAAoB,aAApB,CAAJ,EAAwC;IACtC,MAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;EACD;;EACD,QAAQ,GAAG,QAAQ,CAAC,KAAT,CAAe,CAAf,CAAX,CANiD,CAMpB;;EAC7B,MAAM,SAAS,GAAI,MAAD,IAAoB,UAAU,CAAC,QAAQ,CAAC,KAAT,CAAe,MAAM,GAAG,UAAxB,EAAoC,CAAC,MAAM,GAAG,CAAV,IAAe,UAAnD,CAAD,CAAhD,CAPiD,CASjD;;;EACA,IAAI,SAAS,CAAC,CAAD,CAAT,KAAiB,IAArB,EAA2B;IACzB,IAAI;EACL;;EACD,MAAM,SAAS,GAAG,SAAS,CAAC,CAAD,CAA3B;EACA,MAAM,KAAK,GAAwB,EAAnC;;EAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;IAClC;IACA,MAAM,UAAU,GAAG,IAAI,SAAS,CAAC,CAAC,GAAG,CAAL,CAAb,GAAuB,IAAI,UAA9C,CAFkC,CAGlC;;IACA,MAAM,GAAG,GAAG,UAAU,GAAG,UAAzB,CAJkC,CAKlC;IACA;;IACA,MAAM,cAAc,GAAG,SAAS,CAAC,GAAD,CAAhC;;IACA,IAAI,cAAc,KAAK,CAAnB,IAAwB,cAAc,KAAK,CAA/C,EAAkD;MAChD,IAAI;IACL;;IACD,MAAM,OAAO,GAAG,cAAc,KAAK,CAAnC;;IACA,IAAI,SAAS,CAAC,GAAG,GAAG,CAAP,CAAT,KAAuB,IAA3B,EAAiC;MAC/B,IAAI;IACL;;IACD,MAAM,gBAAgB,GAAG,CAAC,GAAG,GAAG,CAAP,IAAY,UAArC;IACA,MAAM,gBAAgB,GAAG,SAAS,CAAC,GAAG,GAAG,CAAP,CAAlC;IACA,MAAM,UAAU,GAAG,QAAQ,CAAC,KAAT,CAAe,gBAAf,EAAiC,gBAAgB,GAAG,IAAI,gBAAxD,CAAnB;IACA,MAAM,IAAI,GAAsB,CAAC,OAAD,EAAU,OAAO,UAAjB,CAAhC;IACA,KAAK,CAAC,IAAN,CAAW,IAAX;EACD;;EACD,OAAO,CAAC,KAAD,CAAP;AACD","sourceRoot":"","sourcesContent":["import { decodeUint, wordLength, fail } from '../common';\nexport function decodeTryAggregate(calldata) {\n    // function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public returns (tuple(bool success, bytes returnData)[])\n    const errorMethodId = '0x08c379a0';\n    if (calldata.startsWith(errorMethodId)) {\n        throw new Error('Multicall2 aggregate: call failed');\n    }\n    calldata = calldata.slice(2); // 'remove 0x prefix'\n    const getNumber = (offset) => decodeUint(calldata.slice(offset * wordLength, (offset + 1) * wordLength));\n    // The array offset must be 0x20 - nothing is before the array\n    if (getNumber(0) !== 0x20) {\n        fail();\n    }\n    const arraySize = getNumber(1);\n    const calls = [];\n    for (let i = 0; i < arraySize; i++) {\n        // offset of the call number i\n        const callOffset = 2 * getNumber(i + 2) + 2 * wordLength;\n        // position of the call if we split calldata in chunks of 32 bytes\n        const pos = callOffset / wordLength;\n        // returnData is encoded as a flag showing if the call was successful,\n        // data offset, which should be equal to 0x40, data length and the data itself\n        const successEncoded = getNumber(pos);\n        if (successEncoded !== 1 && successEncoded !== 0) {\n            fail();\n        }\n        const success = successEncoded === 1;\n        if (getNumber(pos + 1) !== 0x40) {\n            fail();\n        }\n        const returnDataOffset = (pos + 3) * wordLength;\n        const returnDataLength = getNumber(pos + 2);\n        const returnData = calldata.slice(returnDataOffset, returnDataOffset + 2 * returnDataLength);\n        const call = [success, '0x' + returnData];\n        calls.push(call);\n    }\n    return [calls];\n}\n//# sourceMappingURL=decoder.js.map"]},"metadata":{},"sourceType":"module"}