{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useReducer } from 'react';\nimport { useDebouncePair, useBlockNumbers } from '../../../hooks';\nimport { MultiChainStatesContext } from './context';\nimport { useConfig, useNetwork } from '../../..';\nimport { useReadonlyNetworks } from '../../network';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { performMulticall } from '../common/performMulticall';\nimport { callsReducer, chainStateReducer, multicall1Factory, multicall2Factory } from '../common';\nimport { getCallsForUpdate, getUniqueActiveCalls } from '../../../helpers';\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting';\nimport { useChainId } from '../../../hooks/useChainId';\nimport { useWindow } from '../../window/context';\nimport { useUpdateNetworksState } from '../../network/readonlyNetworks/context';\n\nfunction composeChainState(networks, state, multicallAddresses) {\n  return fromEntries(Object.keys(networks).map(chainId => [Number(chainId), {\n    value: state[Number(chainId)],\n    multicallAddress: multicallAddresses[Number(chainId)]\n  }]));\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nconst stripCall = _a => {\n  var {\n    isStatic,\n    lastUpdatedBlockNumber\n  } = _a,\n      strippedCall = __rest(_a, [\"isStatic\", \"lastUpdatedBlockNumber\"]);\n\n  return strippedCall;\n};\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\n\nexport function MultiChainStateProvider(_ref) {\n  let {\n    children,\n    multicallAddresses\n  } = _ref;\n  const {\n    multicallVersion,\n    fastMulticallEncoding\n  } = useConfig();\n  const networks = useReadonlyNetworks();\n  const blockNumbers = useBlockNumbers();\n  const {\n    reportError\n  } = useNetwork();\n  const {\n    isActive\n  } = useWindow();\n  const [calls, dispatchCalls] = useReducer(callsReducer, []);\n  const [state, dispatchState] = useReducer(chainStateReducer, {});\n  const updateNetworks = useUpdateNetworksState();\n  const multicall = (multicallVersion === 1 ? multicall1Factory : multicall2Factory)(fastMulticallEncoding !== null && fastMulticallEncoding !== void 0 ? fastMulticallEncoding : false);\n  const [debouncedCalls, debouncedNetworks] = useDebouncePair(calls, networks, 50);\n  const uniqueCalls = useMemo(() => getUniqueActiveCalls(debouncedCalls), [debouncedCalls]); // used for deep equality in hook dependencies\n\n  const uniqueCallsJSON = JSON.stringify(debouncedCalls.map(stripCall));\n  const chainId = useChainId();\n  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, chainId !== undefined ? blockNumbers[chainId] : undefined, multicallAddresses);\n\n  function multicallForChain(chainId, provider) {\n    if (!isActive) {\n      return;\n    }\n\n    const blockNumber = blockNumbers[chainId];\n    const multicallAddress = multicallAddresses[chainId];\n\n    if (!provider || !blockNumber) {\n      return;\n    }\n\n    if (!multicallAddress) {\n      reportError(new Error(`Missing multicall address for chain id ${chainId}`));\n      return;\n    }\n\n    if (debouncedNetworks !== networks) {\n      // Wait for debounce to catch up.\n      return;\n    }\n\n    const updatedCalls = getCallsForUpdate(debouncedCalls, {\n      chainId,\n      blockNumber\n    });\n    const callsOnThisChain = getUniqueActiveCalls(updatedCalls);\n    updateNetworks({\n      type: 'UPDATE_NON_STATIC_CALLS_COUNT',\n      chainId,\n      count: calls.filter(call => !call.isStatic && call.chainId === chainId).length\n    });\n    performMulticall(provider, multicall, multicallAddress, blockNumber, callsOnThisChain, dispatchState, chainId, reportError);\n    dispatchCalls({\n      type: 'UPDATE_CALLS',\n      calls,\n      updatedCalls,\n      blockNumber,\n      chainId\n    });\n  }\n\n  useEffect(() => {\n    var _a, _b;\n\n    for (const [_chainId, provider] of Object.entries(networks)) {\n      const chainId = Number(_chainId); // chainId is in provider is not the same as the chainId in the state wait for chainId to catch up\n\n      if (chainId === ((_a = provider.network) === null || _a === void 0 ? void 0 : _a.chainId) || chainId === ((_b = provider._network) === null || _b === void 0 ? void 0 : _b.chainId)) {\n        multicallForChain(chainId, provider);\n      }\n    }\n  }, [networks, multicallAddresses, uniqueCallsJSON, blockNumbers]);\n  const chains = useMemo(() => composeChainState(networks, state, multicallAddresses), [state, multicallAddresses, networks]);\n  const provided = {\n    chains,\n    dispatchCalls\n  };\n  return _jsx(MultiChainStatesContext.Provider, {\n    value: provided,\n    children: children\n  });\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/multiChainStates/provider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useReducer } from 'react';\nimport { useDebouncePair, useBlockNumbers } from '../../../hooks';\nimport { MultiChainStatesContext } from './context';\nimport { useConfig, useNetwork } from '../../..';\nimport { useReadonlyNetworks } from '../../network';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { performMulticall } from '../common/performMulticall';\nimport { callsReducer, chainStateReducer, multicall1Factory, multicall2Factory } from '../common';\nimport { getCallsForUpdate, getUniqueActiveCalls } from '../../../helpers';\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting';\nimport { useChainId } from '../../../hooks/useChainId';\nimport { useWindow } from '../../window/context';\nimport { useUpdateNetworksState } from '../../network/readonlyNetworks/context';\nfunction composeChainState(networks, state, multicallAddresses) {\n    return fromEntries(Object.keys(networks).map((chainId) => [\n        Number(chainId),\n        {\n            value: state[Number(chainId)],\n            multicallAddress: multicallAddresses[Number(chainId)],\n        },\n    ]));\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stripCall = (_a) => {\n    var { isStatic, lastUpdatedBlockNumber } = _a, strippedCall = __rest(_a, [\"isStatic\", \"lastUpdatedBlockNumber\"]);\n    return strippedCall;\n};\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function MultiChainStateProvider({ children, multicallAddresses }) {\n    const { multicallVersion, fastMulticallEncoding } = useConfig();\n    const networks = useReadonlyNetworks();\n    const blockNumbers = useBlockNumbers();\n    const { reportError } = useNetwork();\n    const { isActive } = useWindow();\n    const [calls, dispatchCalls] = useReducer(callsReducer, []);\n    const [state, dispatchState] = useReducer(chainStateReducer, {});\n    const updateNetworks = useUpdateNetworksState();\n    const multicall = (multicallVersion === 1 ? multicall1Factory : multicall2Factory)(fastMulticallEncoding !== null && fastMulticallEncoding !== void 0 ? fastMulticallEncoding : false);\n    const [debouncedCalls, debouncedNetworks] = useDebouncePair(calls, networks, 50);\n    const uniqueCalls = useMemo(() => getUniqueActiveCalls(debouncedCalls), [debouncedCalls]);\n    // used for deep equality in hook dependencies\n    const uniqueCallsJSON = JSON.stringify(debouncedCalls.map(stripCall));\n    const chainId = useChainId();\n    useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, chainId !== undefined ? blockNumbers[chainId] : undefined, multicallAddresses);\n    function multicallForChain(chainId, provider) {\n        if (!isActive) {\n            return;\n        }\n        const blockNumber = blockNumbers[chainId];\n        const multicallAddress = multicallAddresses[chainId];\n        if (!provider || !blockNumber) {\n            return;\n        }\n        if (!multicallAddress) {\n            reportError(new Error(`Missing multicall address for chain id ${chainId}`));\n            return;\n        }\n        if (debouncedNetworks !== networks) {\n            // Wait for debounce to catch up.\n            return;\n        }\n        const updatedCalls = getCallsForUpdate(debouncedCalls, { chainId, blockNumber });\n        const callsOnThisChain = getUniqueActiveCalls(updatedCalls);\n        updateNetworks({\n            type: 'UPDATE_NON_STATIC_CALLS_COUNT',\n            chainId,\n            count: calls.filter((call) => !call.isStatic && call.chainId === chainId).length,\n        });\n        performMulticall(provider, multicall, multicallAddress, blockNumber, callsOnThisChain, dispatchState, chainId, reportError);\n        dispatchCalls({ type: 'UPDATE_CALLS', calls, updatedCalls, blockNumber, chainId });\n    }\n    useEffect(() => {\n        var _a, _b;\n        for (const [_chainId, provider] of Object.entries(networks)) {\n            const chainId = Number(_chainId);\n            // chainId is in provider is not the same as the chainId in the state wait for chainId to catch up\n            if (chainId === ((_a = provider.network) === null || _a === void 0 ? void 0 : _a.chainId) || chainId === ((_b = provider._network) === null || _b === void 0 ? void 0 : _b.chainId)) {\n                multicallForChain(chainId, provider);\n            }\n        }\n    }, [networks, multicallAddresses, uniqueCallsJSON, blockNumbers]);\n    const chains = useMemo(() => composeChainState(networks, state, multicallAddresses), [\n        state,\n        multicallAddresses,\n        networks,\n    ]);\n    const provided = { chains, dispatchCalls };\n    return _jsx(MultiChainStatesContext.Provider, { value: provided, children: children });\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}