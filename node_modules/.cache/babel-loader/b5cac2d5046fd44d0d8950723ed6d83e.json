{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useResolveName` is a hook that is used to resolve an ENS name (e.g. `name.eth`) to a specific address.\n * @param name ENS name to be resolved\n * @returns {} Object with the following:\n  - `address: string | null | undefined` - resolved address for the given ENS name or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n */\n\nexport const useResolveName = name => {\n  const {\n    library\n  } = useEthers();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [address, setAddress] = useState();\n  useEffect(() => {\n    let mounted = true;\n    void (async () => {\n      if (!library || !name) return;\n\n      try {\n        setIsLoading(true);\n        const resolved = await library.resolveName(name);\n        if (!mounted) return;\n        setAddress(resolved);\n      } catch (e) {\n        if (!mounted) return;\n        setError(e);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, [library, name]);\n  return {\n    address,\n    isLoading,\n    error\n  };\n};","map":{"version":3,"sources":["../../../../src/hooks/useResolveName.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;AACA,SAAS,SAAT,QAA0B,aAA1B;AAEA;;;;;;;;AAQG;;AACH,OAAO,MAAM,cAAc,GAAI,IAAD,IAA6B;EACzD,MAAM;IAAE;EAAF,IAAc,SAAS,EAA7B;EACA,MAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAe,IAAf,CAAlC;EACA,MAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAQ,EAAtC;EAEA,SAAS,CAAC,MAAK;IACb,IAAI,OAAO,GAAG,IAAd;IAEA,KAAK,CAAC,YAAW;MACf,IAAI,CAAC,OAAD,IAAY,CAAC,IAAjB,EAAuB;;MACvB,IAAI;QACF,YAAY,CAAC,IAAD,CAAZ;QACA,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,WAAR,CAAoB,IAApB,CAAvB;QACA,IAAI,CAAC,OAAL,EAAc;QACd,UAAU,CAAC,QAAD,CAAV;MACD,CALD,CAKE,OAAO,CAAP,EAAe;QACf,IAAI,CAAC,OAAL,EAAc;QACd,QAAQ,CAAC,CAAD,CAAR;MACD,CARD,SAQU;QACR,YAAY,CAAC,KAAD,CAAZ;MACD;IACF,CAbI,GAAL;IAeA,OAAO,MAAK;MACV,OAAO,GAAG,KAAV;IACD,CAFD;EAGD,CArBQ,EAqBN,CAAC,OAAD,EAAU,IAAV,CArBM,CAAT;EAuBA,OAAO;IAAE,OAAF;IAAW,SAAX;IAAsB;EAAtB,CAAP;AACD,CA9BM","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useResolveName` is a hook that is used to resolve an ENS name (e.g. `name.eth`) to a specific address.\n * @param name ENS name to be resolved\n * @returns {} Object with the following:\n  - `address: string | null | undefined` - resolved address for the given ENS name or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n */\nexport const useResolveName = (name) => {\n    const { library } = useEthers();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [address, setAddress] = useState();\n    useEffect(() => {\n        let mounted = true;\n        void (async () => {\n            if (!library || !name)\n                return;\n            try {\n                setIsLoading(true);\n                const resolved = await library.resolveName(name);\n                if (!mounted)\n                    return;\n                setAddress(resolved);\n            }\n            catch (e) {\n                if (!mounted)\n                    return;\n                setError(e);\n            }\n            finally {\n                setIsLoading(false);\n            }\n        })();\n        return () => {\n            mounted = false;\n        };\n    }, [library, name]);\n    return { address, isLoading, error };\n};\n//# sourceMappingURL=useResolveName.js.map"]},"metadata":{},"sourceType":"module"}